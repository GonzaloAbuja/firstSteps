{
  "version": 3,
  "sources": ["../../ol/dom.js", "../../ol/ImageState.js", "../../ol/Image.js"],
  "sourcesContent": ["import {WORKER_OFFSCREEN_CANVAS} from './has.js';\r\n\r\n/**\r\n * @module ol/dom\r\n */\r\n\r\n//FIXME Move this function to the canvas module\r\n/**\r\n * Create an html canvas element and returns its 2d context.\r\n * @param {number} [width] Canvas width.\r\n * @param {number} [height] Canvas height.\r\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\r\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\r\n * @return {CanvasRenderingContext2D} The context.\r\n */\r\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\r\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\r\n  let canvas;\r\n  if (canvasPool && canvasPool.length) {\r\n    canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());\r\n  } else if (WORKER_OFFSCREEN_CANVAS) {\r\n    canvas = new OffscreenCanvas(width || 300, height || 300);\r\n  } else {\r\n    canvas = document.createElement('canvas');\r\n  }\r\n  if (width) {\r\n    canvas.width = width;\r\n  }\r\n  if (height) {\r\n    canvas.height = height;\r\n  }\r\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\r\n  return /** @type {CanvasRenderingContext2D} */ (\r\n    canvas.getContext('2d', settings)\r\n  );\r\n}\r\n\r\n/** @type {CanvasRenderingContext2D} */\r\nlet sharedCanvasContext;\r\n\r\n/**\r\n * @return {CanvasRenderingContext2D} Shared canvas context.\r\n */\r\nexport function getSharedCanvasContext2D() {\r\n  if (!sharedCanvasContext) {\r\n    sharedCanvasContext = createCanvasContext2D(1, 1);\r\n  }\r\n  return sharedCanvasContext;\r\n}\r\n\r\n/**\r\n * Releases canvas memory to avoid exceeding memory limits in Safari.\r\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nexport function releaseCanvas(context) {\r\n  const canvas = context.canvas;\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  context.clearRect(0, 0, 1, 1);\r\n}\r\n\r\n/**\r\n * Get the current computed width for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The width.\r\n */\r\nexport function outerWidth(element) {\r\n  let width = element.offsetWidth;\r\n  const style = getComputedStyle(element);\r\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\r\n\r\n  return width;\r\n}\r\n\r\n/**\r\n * Get the current computed height for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The height.\r\n */\r\nexport function outerHeight(element) {\r\n  let height = element.offsetHeight;\r\n  const style = getComputedStyle(element);\r\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\r\n\r\n  return height;\r\n}\r\n\r\n/**\r\n * @param {Node} newNode Node to replace old node\r\n * @param {Node} oldNode The node to be replaced\r\n */\r\nexport function replaceNode(newNode, oldNode) {\r\n  const parent = oldNode.parentNode;\r\n  if (parent) {\r\n    parent.replaceChild(newNode, oldNode);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove.\r\n * @return {Node|null} The node that was removed or null.\r\n */\r\nexport function removeNode(node) {\r\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove the children from.\r\n */\r\nexport function removeChildren(node) {\r\n  while (node.lastChild) {\r\n    node.removeChild(node.lastChild);\r\n  }\r\n}\r\n\r\n/**\r\n * Transform the children of a parent node so they match the\r\n * provided list of children.  This function aims to efficiently\r\n * remove, add, and reorder child nodes while maintaining a simple\r\n * implementation (it is not guaranteed to minimize DOM operations).\r\n * @param {Node} node The parent node whose children need reworking.\r\n * @param {Array<Node>} children The desired children.\r\n */\r\nexport function replaceChildren(node, children) {\r\n  const oldChildren = node.childNodes;\r\n\r\n  for (let i = 0; true; ++i) {\r\n    const oldChild = oldChildren[i];\r\n    const newChild = children[i];\r\n\r\n    // check if our work is done\r\n    if (!oldChild && !newChild) {\r\n      break;\r\n    }\r\n\r\n    // check if children match\r\n    if (oldChild === newChild) {\r\n      continue;\r\n    }\r\n\r\n    // check if a new child needs to be added\r\n    if (!oldChild) {\r\n      node.appendChild(newChild);\r\n      continue;\r\n    }\r\n\r\n    // check if an old child needs to be removed\r\n    if (!newChild) {\r\n      node.removeChild(oldChild);\r\n      --i;\r\n      continue;\r\n    }\r\n\r\n    // reorder\r\n    node.insertBefore(newChild, oldChild);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/ImageState\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  IDLE: 0,\r\n  LOADING: 1,\r\n  LOADED: 2,\r\n  ERROR: 3,\r\n  EMPTY: 4,\r\n};\r\n", "/**\r\n * @module ol/Image\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport ImageState from './ImageState.js';\r\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\r\nimport {listenOnce, unlistenByKey} from './events.js';\r\nimport {toPromise} from './functions.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageObject\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\r\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\r\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\r\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * For images that cover any extent and resolution (static images), the loader function should not accept\r\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\r\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\r\n * For loaders that generate images, the promise should not resolve until the image is loaded.\r\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\r\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\r\n * correct `extent`, `resolution` and `pixelRatio`.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\r\n * @api\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\r\n */\r\n\r\nclass ImageWrapper extends EventTarget {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\r\n   * resolution will be assumed.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number|Array<number>|undefined}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */\r\n    this.state =\r\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('./DataTile.js').ImageLike|null}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Image.js\").Loader}\r\n     */\r\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  getExtent() {\r\n    return this.extent;\r\n  }\r\n\r\n  /**\r\n   * @return {import('./DataTile.js').ImageLike} Image.\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} PixelRatio.\r\n   */\r\n  getPixelRatio() {\r\n    return this.pixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @return {number|Array<number>} Resolution.\r\n   */\r\n  getResolution() {\r\n    return /** @type {number} */ (this.resolution);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./ImageState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      if (this.loader) {\r\n        this.state = ImageState.LOADING;\r\n        this.changed();\r\n        const resolution = this.getResolution();\r\n        const requestResolution = Array.isArray(resolution)\r\n          ? resolution[0]\r\n          : resolution;\r\n        toPromise(() =>\r\n          this.loader(\r\n            this.getExtent(),\r\n            requestResolution,\r\n            this.getPixelRatio(),\r\n          ),\r\n        )\r\n          .then((image) => {\r\n            if ('image' in image) {\r\n              this.image_ = image.image;\r\n            }\r\n            if ('extent' in image) {\r\n              this.extent = image.extent;\r\n            }\r\n            if ('resolution' in image) {\r\n              this.resolution = image.resolution;\r\n            }\r\n            if ('pixelRatio' in image) {\r\n              this.pixelRatio_ = image.pixelRatio;\r\n            }\r\n            if (\r\n              image instanceof HTMLImageElement ||\r\n              image instanceof ImageBitmap ||\r\n              image instanceof HTMLCanvasElement ||\r\n              image instanceof HTMLVideoElement\r\n            ) {\r\n              this.image_ = image;\r\n            }\r\n            this.state = ImageState.LOADED;\r\n          })\r\n          .catch((error) => {\r\n            this.state = ImageState.ERROR;\r\n            console.error(error); // eslint-disable-line no-console\r\n          })\r\n          .finally(() => this.changed());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import('./DataTile.js').ImageLike} image The image.\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * @param {number|Array<number>} resolution Resolution.\r\n   */\r\n  setResolution(resolution) {\r\n    this.resolution = resolution;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./DataTile.js').ImageLike} image Image element.\r\n * @param {function():any} loadHandler Load callback function.\r\n * @param {function():any} errorHandler Error callback function.\r\n * @return {function():void} Callback to stop listening.\r\n */\r\nexport function listenImage(image, loadHandler, errorHandler) {\r\n  const img = /** @type {HTMLImageElement} */ (image);\r\n  let listening = true;\r\n  let decoding = false;\r\n  let loaded = false;\r\n\r\n  const listenerKeys = [\r\n    listenOnce(img, EventType.LOAD, function () {\r\n      loaded = true;\r\n      if (!decoding) {\r\n        loadHandler();\r\n      }\r\n    }),\r\n  ];\r\n\r\n  if (img.src && IMAGE_DECODE) {\r\n    decoding = true;\r\n    img\r\n      .decode()\r\n      .then(function () {\r\n        if (listening) {\r\n          loadHandler();\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        if (listening) {\r\n          if (loaded) {\r\n            loadHandler();\r\n          } else {\r\n            errorHandler();\r\n          }\r\n        }\r\n      });\r\n  } else {\r\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\r\n  }\r\n\r\n  return function unlisten() {\r\n    listening = false;\r\n    listenerKeys.forEach(unlistenByKey);\r\n  };\r\n}\r\n\r\n/**\r\n * Loads an image.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n * @api\r\n */\r\nexport function load(image, src) {\r\n  return new Promise((resolve, reject) => {\r\n    function handleLoad() {\r\n      unlisten();\r\n      resolve(image);\r\n    }\r\n    function handleError() {\r\n      unlisten();\r\n      reject(new Error('Image load error'));\r\n    }\r\n    function unlisten() {\r\n      image.removeEventListener('load', handleLoad);\r\n      image.removeEventListener('error', handleError);\r\n    }\r\n    image.addEventListener('load', handleLoad);\r\n    image.addEventListener('error', handleError);\r\n    if (src) {\r\n      image.src = src;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n */\r\nexport function decodeFallback(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE\r\n    ? new Promise((resolve, reject) =>\r\n        image\r\n          .decode()\r\n          .then(() => resolve(image))\r\n          .catch((e) =>\r\n            image.complete && image.width ? resolve(image) : reject(e),\r\n          ),\r\n      )\r\n    : load(image);\r\n}\r\n\r\n/**\r\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\r\n * the loaded image otherwise.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\r\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\r\n * @api\r\n */\r\nexport function decode(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE && CREATE_IMAGE_BITMAP\r\n    ? image\r\n        .decode()\r\n        .then(() => createImageBitmap(image))\r\n        .catch((e) => {\r\n          if (image.complete && image.width) {\r\n            return image;\r\n          }\r\n          throw e;\r\n        })\r\n    : decodeFallback(image);\r\n}\r\n\r\nexport default ImageWrapper;\r\n"],
  "mappings": "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",
  "names": []
}
