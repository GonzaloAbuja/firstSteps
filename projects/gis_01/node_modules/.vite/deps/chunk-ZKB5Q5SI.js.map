{
  "version": 3,
  "sources": ["../../ol/MapBrowserEventType.js", "../../ol/events/condition.js"],
  "sourcesContent": ["/**\r\n * @module ol/MapBrowserEventType\r\n */\r\nimport EventType from './events/EventType.js';\r\n\r\n/**\r\n * Constants for event names.\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * A true single click with no dragging and no double click. Note that this\r\n   * event is delayed by 250 ms to ensure that it is not a double click.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\r\n   * @api\r\n   */\r\n  SINGLECLICK: 'singleclick',\r\n\r\n  /**\r\n   * A click with no dragging. A double click will fire two of this.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\r\n   * @api\r\n   */\r\n  CLICK: EventType.CLICK,\r\n\r\n  /**\r\n   * A true double click, with no dragging.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\r\n   * @api\r\n   */\r\n  DBLCLICK: EventType.DBLCLICK,\r\n\r\n  /**\r\n   * Triggered when a pointer is dragged.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\r\n   * @api\r\n   */\r\n  POINTERDRAG: 'pointerdrag',\r\n\r\n  /**\r\n   * Triggered when a pointer is moved. Note that on touch devices this is\r\n   * triggered when the map is panned, so is not the same as mousemove.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\r\n   * @api\r\n   */\r\n  POINTERMOVE: 'pointermove',\r\n\r\n  POINTERDOWN: 'pointerdown',\r\n  POINTERUP: 'pointerup',\r\n  POINTEROVER: 'pointerover',\r\n  POINTEROUT: 'pointerout',\r\n  POINTERENTER: 'pointerenter',\r\n  POINTERLEAVE: 'pointerleave',\r\n  POINTERCANCEL: 'pointercancel',\r\n};\r\n\r\n/***\r\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\r\n */\r\n", "/**\r\n * @module ol/events/condition\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport {FALSE, TRUE} from '../functions.js';\r\nimport {MAC, WEBKIT} from '../has.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * `{boolean}`. If the condition is met, true should be returned.\r\n *\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\r\n */\r\n\r\n/**\r\n * Creates a condition function that passes when all provided conditions pass.\r\n * @param {...Condition} var_args Conditions to check.\r\n * @return {Condition} Condition function.\r\n */\r\nexport function all(var_args) {\r\n  const conditions = arguments;\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @return {boolean} All conditions passed.\r\n   */\r\n  return function (event) {\r\n    let pass = true;\r\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\r\n      pass = pass && conditions[i](event);\r\n      if (!pass) {\r\n        break;\r\n      }\r\n    }\r\n    return pass;\r\n  };\r\n}\r\n\r\n/**\r\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\r\n * additionally the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt key is pressed.\r\n * @api\r\n */\r\nexport const altKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\r\n * (e.g. when additionally the platform-modifier-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt and shift keys are pressed.\r\n * @api\r\n */\r\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus. This condition requires a map target\r\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map has the focus.\r\n * @api\r\n */\r\nexport const focus = function (event) {\r\n  const targetElement = event.map.getTargetElement();\r\n  const activeElement = event.map.getOwnerDocument().activeElement;\r\n  return targetElement.contains(activeElement);\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\r\n */\r\nexport const focusWithTabindex = function (event) {\r\n  return event.map.getTargetElement().hasAttribute('tabindex')\r\n    ? focus(event)\r\n    : true;\r\n};\r\n\r\n/**\r\n * Return always true.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True.\r\n * @api\r\n */\r\nexport const always = TRUE;\r\n\r\n/**\r\n * Return `true` if the event is a `click` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `click` event.\r\n * @api\r\n */\r\nexport const click = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event has an \"action\"-producing mouse button.\r\n *\r\n * By definition, this includes left-click on windows/linux, and left-click\r\n * without the ctrl key on Macs.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} The result.\r\n */\r\nexport const mouseActionButton = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {MouseEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\r\n};\r\n\r\n/**\r\n * Return always false.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} False.\r\n * @api\r\n */\r\nexport const never = FALSE;\r\n\r\n/**\r\n * Return `true` if the browser event is a `pointermove` event, `false`\r\n * otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the browser event is a `pointermove` event.\r\n * @api\r\n */\r\nexport const pointerMove = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == 'pointermove';\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `singleclick` event.\r\n * @api\r\n */\r\nexport const singleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `dblclick` event.\r\n * @api\r\n */\r\nexport const doubleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\r\n * pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if there no modifier keys are pressed.\r\n * @api\r\n */\r\nexport const noModifierKeys = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\r\n * the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKey = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\r\n};\r\n\r\n/**\r\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\r\n * additionally the alt-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the shift key is pressed.\r\n * @api\r\n */\r\nexport const shiftKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the target element is not editable, i.e. not an `input`,\r\n * `select`, or `textarea` element and no `contenteditable` attribute is\r\n * set or inherited, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if the target element is not editable.\r\n * @api\r\n */\r\nexport const targetNotEditable = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\r\n  return (\r\n    tagName !== 'INPUT' &&\r\n    tagName !== 'SELECT' &&\r\n    tagName !== 'TEXTAREA' &&\r\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\r\n    // different type like `SVGElement`.\r\n    // @ts-ignore\r\n    !originalEvent.target.isContentEditable\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a mouse device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a mouse device.\r\n * @api\r\n */\r\nexport const mouseOnly = function (mapBrowserEvent) {\r\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvent !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvent.pointerType == 'mouse';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a touchable device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a touchable device.\r\n * @api\r\n */\r\nexport const touchOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvt !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvt.pointerType === 'touch';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a digital pen.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a digital pen.\r\n * @api\r\n */\r\nexport const penOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvt !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvt.pointerType === 'pen';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a primary pointer in\r\n * contact with the surface or if the left mouse button is pressed.\r\n * See https://www.w3.org/TR/pointerevents/#button-states.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a primary pointer.\r\n * @api\r\n */\r\nexport const primaryAction = function (mapBrowserEvent) {\r\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvent !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
